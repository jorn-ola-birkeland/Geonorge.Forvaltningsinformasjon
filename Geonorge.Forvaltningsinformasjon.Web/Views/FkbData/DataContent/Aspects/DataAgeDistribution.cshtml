@using Microsoft.AspNetCore.Mvc.Localization
@using Geonorge.Forvaltningsinformasjon.Web.Models.FkbData.DataContent
@using System.Globalization
@using Geonorge.Forvaltningsinformasjon.Web.Models.Common.Helpers;

@model Geonorge.Forvaltningsinformasjon.Web.Models.FkbData.DataContent.DataAgeDistributionViewModel

@inject IViewLocalizer Localizer
@inject ApplicationSettings AppSettings

@{
    Layout = "_Layout.cshtml";
    ViewData["currentTab"] = "DataAgeDistribution";
}

@section titleSection
{
    <div style="text-align:center">
        @if (Model.Type == AdministrativeUnitType.Country)
        {
            <h4>@Localizer["Landsoversikt"]</h4>
        }
        else if (Model.Type == AdministrativeUnitType.County)
        {
            <h4>@Localizer["Fylkesoversikt for {0}", Model.AdministrativeUnitName]</h4>
        }
        else
        {
            <h4>@Localizer["Kommuneoversikt for {0}", Model.AdministrativeUnitName]</h4>
        }
    </div>
}

@section aspectsSection
    {
    <div class="col-md-4">
    </div>
    <div class="col-md-8">
        <canvas id="myChart" width="400" height="400"></canvas>
    </div>

    <script src="/dist/js/chart/chart.js"></script>
    <script type="text/javascript">
        var ctx = document.getElementById('myChart');
        var myChart = new Chart(ctx, {
            type: 'horizontalBar',
            data: {
                labels: [@Html.Raw(Model.DataSetNames)],
                datasets: [
                    @foreach (DataAgeDistributionViewModel.Category category in Model.Categories)
                    {
                        <text>{
                        label: '@category.Name',
                        data: [@string.Join(',', category.Percents.Select(p => p.ToString(CultureInfo.InvariantCulture)))],
                        backgroundColor: 'rgb(@category.RgbColor)'
                        },</text>
                    }
                ]
            },
            options: {
                legend: {
                    position: 'bottom',
                    align: 'end',
                    labels: {
                        boxWidth: 10
                    }
                },
                tooltips: {
                    backgroundColor: 'rgba(@AppSettings.ChartLegendSettings.BackgroundColor)',
                    titleFontColor: 'rgba(@AppSettings.ChartLegendSettings.TitleTextColor)',
                    bodyFontColor: 'rgba(@AppSettings.ChartLegendSettings.BodyTextColor)',
                    borderColor: 'rgba(@AppSettings.ChartLegendSettings.BorderColor)',
                    borderWidth: '@AppSettings.ChartLegendSettings.BorderWidth',
                    callbacks: {
                        label: function (tooltipItem, data) {
                            var label = data.datasets[tooltipItem.datasetIndex].label || '';

                            if (label) {
                                label += ': '
                            }
                            label += Math.round(tooltipItem.xLabel * 10) / 10 + '%';

                            return label;
                        }
                    }
                },
                scales: {
                    xAxes: [{
                        stacked: true,
                        position: 'bottom',
                        ticks: {
                            max: 100,
                            min: 0,
                            setpSize: 10,
                            callback: function (tick) {
                                return tick.toString() + '%';
                            }
                        }
                    }],
                    yAxes: [{
                        stacked: true,
                        gridLines: {
                            display: false
                        },
                        barPercentage: 0.5
                    }]
                }
            },
            plugins: [{
                beforeDraw: function () {
                    myChart.ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                    myChart.ctx.textAlign = 'left';
                    myChart.ctx.textBaseline = 'center';

                    myChart.data.datasets.forEach(function (dataset, i) {
                        var meta = myChart.getDatasetMeta(i);

                        meta.data.forEach(function (bar, index) {
                            var data = dataset.data[index];

                            if (i == 0 && isNaN(data)) {
                                const text = '@Localizer["Ingen objekter med egenskap dataalder"]';
                                const x = (myChart.chartArea.right - myChart.chartArea.left) / 2;
                                myChart.ctx.fillText(text, x, bar._model.y);
                            }
                        });
                    });
                }
            }]
        });
    </script>
}